[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/클래스 공부 (3) .html",
    "href": "posts/클래스 공부 (3) .html",
    "title": "클래스 공부 (3)",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/클래스 공부 (3) .html#클래스-생성",
    "href": "posts/클래스 공부 (3) .html#클래스-생성",
    "title": "클래스 공부 (3)",
    "section": "클래스 생성",
    "text": "클래스 생성\n\nclass CoinFlipper:\n    def __init__(self):\n        self.coins = list()\n        self.win_cond = {'우유':[],'동민':[]}\n        self.winner = str()\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.coins.append(np.random.choice(['앞면','뒷면']))\n        if self.coins[-2:] == self.win_cond['우유']:\n            self.winner = '우유'\n            raise StopIteration\n        elif self.coins[-2:] == self.win_cond['동민']:\n            self.winner = '동민'\n            raise StopIteration\n        else:\n            pass\n    def __call__(self,win_cond):\n        self.win_cond = win_cond\n        for _ in self:\n            pass\n    def __repr__(self):\n        repr_str = '우유의 승리조건: {}\\n동민의 승리조건: {}\\n동전을 던진결과들: {}\\n최종승리자: {}'.format(\n            self.win_cond['우유'],\n            self.win_cond['동민'],\n            self.coins,\n            self.winner\n        )\n        return repr_str\n\n\ncoin_fliper = CoinFlipper()\n\n\ncoin_fliper\n\n우유의 승리조건: []\n동민의 승리조건: []\n동전을 던진결과들: []\n최종승리자: \n\n\n\nwin_cond = {\n    '우유':['앞면','뒷면'],\n    '동민':['뒷면','앞면']\n}\n\n\ncoin_fliper(win_cond)\n\n\ncoin_fliper\n\n우유의 승리조건: ['앞면', '뒷면']\n동민의 승리조건: ['뒷면', '앞면']\n동전을 던진결과들: ['뒷면', '뒷면', '뒷면', '뒷면', '뒷면', '뒷면', '앞면']\n최종승리자: 동민\n\n\n\ncoinfliper_lst = [CoinFlipper() for _ in range(10000)]\nwinners = []\nfor coinfliper in coinfliper_lst:\n    coinfliper(win_cond)\n    winners.append(coinfliper.winner)\n\n\n{'우유':winners.count('우유'), '동민':winners.count('동민')}\n\n{'우유': 4959, '동민': 5041}\n\n\n\ncoinfliper_lst[5000]\n\n우유의 승리조건: ['앞면', '뒷면']\n동민의 승리조건: ['뒷면', '앞면']\n동전을 던진결과들: ['앞면', '뒷면']\n최종승리자: 우유\n\n\n\n# (3)\n\n\nwin_cond = {\n    '우유':['앞면','뒷면'],\n    '동민':['뒷면','뒷면']\n}\n\n\ncoinfliper_lst = [CoinFlipper() for _ in range(100)]\nwinners = []\nfor coinfliper in coinfliper_lst:\n    coinfliper(win_cond)\n    winners.append(coinfliper.winner)\n\n\n{'우유':winners.count('우유'), '동민':winners.count('동민')}\n\n{'우유': 71, '동민': 29}\n\n\n\n#---------\n\n\nimport datetime\n\n\nclass Time:\n    def time(self):\n        return datetime.datetime.now().strftime('%y-%m-%d %X')\n\n\nclass Init(Time):\n    def __init__(self):\n        self.init_time = self.time()\n    def __repr__(self):\n        return '인스턴스생성시점: {}'.format(self.init_time)\n\n\na = Init()\nb = Init()\n\n\na,b\n\n(인스턴스생성시점: 24-02-25 09:25:38, 인스턴스생성시점: 24-02-25 09:25:38)\n\n\n\nclass Check:\n  def check(self):\n    return [l for l in dir(self) if l[0]!='_']\n\n\nclass Tuple(Check,tuple):\n  def freq(self):\n    return {s:self.count(s) for s in sef(self)}\n  def __repr__(self):\n    return super().__repr__() + '\\n' +'methods={}'.format(self.check())\n\n\ntpl = Tuple('asdfassdfsasdf')\ntpl\n\n('a', 's', 'd', 'f', 'a', 's', 's', 'd', 'f', 's', 'a', 's', 'd', 'f')\nmethods=['check', 'count', 'freq', 'index']\n\n\n\nclass Init(object):\n  def __init__(self,value):\n    self.value = value\n\nclass Times2(Init):\n  def __init__(self,value):\n    super().__init__(value)\n    self.value = self.value * 2\n\nclass Plus5(Init):\n  def __init__(self,value):\n    super().__init__(value)\n    self.value = self.value + 5\n\n\nclass Times2Plus5(Plus5,Times2):\n  def __init__(self,value):\n    super().__init__(value)\n\n\ndef f(x):\n    return np.sin(x)\n\n\ndef f(x):\n    return np.sin(x)\ndef derivate(f):\n    # step1: 함수오브젝트 f는 입력으로 받은상태\n    # step2: 함수오브젝트 f를 이용하여 df라는 함수를 정의\n    def df(x):\n        h=0.000000000001\n        return (f(x+h)-f(x))/h\n    # step3: 정의된 df를 리턴\n    return df\n\nx = np.linspace(-6,6,100)\nplt.plot(x,f(x),label=r'$f(x)=\\sin(x)$')\nplt.plot(x,(derivate(f))(x),label=r'$f\\'(x)=\\cos(x)$')\nplt.legend()\n\n\n\n\n\n\n\n\n\nclass Student:\n  def __init__(self,name='',age=20,semester=0):\n    self.name = name\n    self.age = age\n    self.semester = semester\n  def __str__(self):\n    print_str = '''이름: {}\\n나이: {}\\n학기: {}'''.format(self.name,self.age,self.semester)\n    return print_str\n\n\nboram = Student(name='김덕배',age=12,semester=1)\nprint(boram)\n\n이름: 김덕배\n나이: 12\n학기: 1"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/리스트와_반복문.html",
    "href": "posts/리스트와_반복문.html",
    "title": "리스트와 반복문",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport itertools"
  },
  {
    "objectID": "posts/리스트와_반복문.html#자료형의-특수기능",
    "href": "posts/리스트와_반복문.html#자료형의-특수기능",
    "title": "리스트와 반복문",
    "section": "자료형의 특수기능",
    "text": "자료형의 특수기능\n###넘파이 특수기능\n\n#벡터화 연산\narr = np.array([1,2,3])\narr + 1\n\narray([2, 3, 4])\n\n\n\n#bool을 이용한 인덱싱\narr = np.array([1,2,3,4,5])\narr[arr&gt;3]\n\narray([4, 5])\n\n\n\n#넘파이 특화 메소드\narr = np.array([5,4,3,2,1])\narr.min(), arr.max(), arr.mean(), arr.argmin(), arr.argmax()\n\n(1, 5, 3.0, 4, 0)\n\n\n\n# sort\narr = np.array([5,4,3,2,1])\narr.sort()\narr\n\narray([1, 2, 3, 4, 5])\n\n\n\n리스트 특수기능\n\n# sort\nlst = [5,4,3,2,1]\nlst.sort()\nlst\n\n[1, 2, 3, 4, 5]\n\n\n\n# append\nlst = [5,4,3,2,1]\nlst.append(4)\nlst\n\n[5, 4, 3, 2, 1, 4]\n\n\n\n# join\ns = '-'\nlst = ['x','y','z']\ns.join(lst) # join(s,lst) 로 해석\n\n'x-y-z'\n\n\n\n\nstr 특수기능\n\n#format\ns = \"제 이름은 {}입니다.\"\nname = \"정민\"\ns.format(name)\n\n'제 이름은 정민입니다.'\n\n\n\n#capitalize\ns = 'asdf'\ns.capitalize()\n\n'Asdf'"
  },
  {
    "objectID": "posts/리스트와_반복문.html#슈도-알고리즘",
    "href": "posts/리스트와_반복문.html#슈도-알고리즘",
    "title": "리스트와 반복문",
    "section": "슈도 알고리즘",
    "text": "슈도 알고리즘\n\nset([''.join(i) for i in itertools.permutations(['x','x','y','y','z'])])\n\n{'xxyyz',\n 'xxyzy',\n 'xxzyy',\n 'xyxyz',\n 'xyxzy',\n 'xyyxz',\n 'xyyzx',\n 'xyzxy',\n 'xyzyx',\n 'xzxyy',\n 'xzyxy',\n 'xzyyx',\n 'yxxyz',\n 'yxxzy',\n 'yxyxz',\n 'yxyzx',\n 'yxzxy',\n 'yxzyx',\n 'yyxxz',\n 'yyxzx',\n 'yyzxx',\n 'yzxxy',\n 'yzxyx',\n 'yzyxx',\n 'zxxyy',\n 'zxyxy',\n 'zxyyx',\n 'zyxxy',\n 'zyxyx',\n 'zyyxx'}\n\n\n\nlen(set([''.join(i) for i in itertools.permutations(['x','x','y','y','z'])]))\n\n30\n\n\n\n\n\nimage.png\n\n\n\nlst = [1,2,3,4,5,6]\nsum([a&lt;=c&lt;=d and b&lt;=c&lt;=d for a,b,c,d in itertools.product(lst,lst,lst,lst)])\n\n196\n\n\n\n\n\nimage.png\n\n\n\n# 컴프리헨션과 조건문\nx = list(range(1,16))\nf = lambda x: np.sin(np.pi/4*x)\nsum([xi for xi in x if f(2+xi)*f(2-xi)&lt;1/4])\n\n32"
  },
  {
    "objectID": "posts/징검다리 문제.html",
    "href": "posts/징검다리 문제.html",
    "title": "징검다리 문제",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n징검다리 (10점)\n10명의 참가자가 (유리,강화유리)의 쌍으로 이루어진 징검다리를 건너는 게임을 시작한다. (유리,강화유리)의 쌍은 총 20개 있다. 따라서 유리는 총 40장이 있다. 참가자는 강화유리로 된 징검다리를 밟으면 살아남지만 유리로 된 징검다리를 밟으면 죽는다. 10명의 참가자의 특징은 아래와 같다.\n1번~8번 참가자, 10번 참가자: 50퍼센트의 확률로 강화유리를 고를 수 있다.\n9번 참가자: 95퍼센트의 확률로 강화유리를 고를 수 있다.\n다리를 건너는 순서는 아래와 같이 번호의 오름차순으로 건너는 방법과 번호의 내림차순으로 건너는 2가지 방법이 있다고 하자.\nType A: 10번 참가자부터 다리를 건너고 그 뒤로 9번, 8번, … 1번 순으로 다리를 건넌다.\nType B: 1번 참가자부터 다리를 건너고 그 뒤로 2번, 3번, … 10번 순으로 다리를 건넌다.\n8번 참가자는 Type A 와 Type B 중 어떠한 경우에 살아남을 확률이 높은가?\n\nclass Dari50:\n  def __init__(self):\n    self.actions = list()\n    self.prob = [0.5,0.5]\n  def play(self):\n    self.actions.append(np.random.choice(['live','die'],p=self.prob))\n\n\nclass Dari95:\n  def __init__(self):\n    self.actions = list()\n    self.prob = [0.95,0.05]\n  def play(self):\n    self.actions.append(np.random.choice(['live','die'],p=self.prob))\n\n\n\n\n#타입A\nresult_list_b = []\nfor _ in range(1000): #다리 건너기 1000번 반복\n  a = Dari50()\n  b = Dari95()\n# 데이터 프레임 생성\n  for i in range(20):\n    if a.actions.count('die') &lt; 1:\n        a.play()\n  for i in range(20 - len(a.actions)):\n    if b.actions.count('die') &lt; 1:\n        b.play()\n  result_list_b.append(a.actions + b.actions)\n\nsum(pd.DataFrame(result_list_b).loc[:,19] == 'live') /len(pd.DataFrame(result_list_b).loc[:,19])\n\n0.384\n\n\n\npd.DataFrame(result_list_a)\n\n\n  \n    \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n0\nlive\nlive\ndie\ndie\ndie\ndie\nlive\nlive\ndie\ndie\nlive\nlive\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n1\nlive\ndie\ndie\nlive\nlive\ndie\nlive\nlive\nlive\nlive\ndie\ndie\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\n\n\n2\ndie\ndie\nlive\nlive\nlive\ndie\ndie\ndie\nlive\nlive\ndie\ndie\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\n\n\n3\ndie\ndie\nlive\ndie\ndie\ndie\nlive\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n4\ndie\nlive\ndie\ndie\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\ndie\nlive\nlive\ndie\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\nlive\nlive\nlive\ndie\nlive\ndie\ndie\nlive\ndie\nlive\nlive\ndie\ndie\nlive\nlive\ndie\nlive\ndie\nlive\nlive\n\n\n996\nlive\ndie\nlive\nlive\ndie\ndie\nlive\nlive\ndie\ndie\nlive\ndie\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\n\n\n997\ndie\nlive\ndie\nlive\ndie\nlive\nlive\ndie\nlive\ndie\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n998\nlive\nlive\nlive\ndie\ndie\ndie\ndie\nlive\ndie\ndie\nlive\ndie\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\n\n\n999\ndie\nlive\ndie\nlive\ndie\nlive\ndie\ndie\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n\n\n1000 rows × 20 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\n\n\n#타입 B 완성 ~~\nresult_list_a = []\nfor _ in range(1000):\n  a = Dari50()\n  b = Dari95()\n\n  for i in range(20):\n    if a.actions.count('die') &lt; 8:\n        a.play()\n  for u in range(20 - len(a.actions)):\n    if b.actions.count('die') &lt; 1:\n        b.play()\n  result_list_a.append(a.actions + b.actions)\n\nsum(pd.DataFrame(result_list_a).loc[:,19] == 'live') /len(pd.DataFrame(result_list_a).loc[:,19])\n\n0.705\n\n\n\npd.DataFrame(result_list_b)\n\n\n  \n    \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n0\ndie\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n1\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n2\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n3\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n4\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n996\nlive\nlive\ndie\nlive\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n997\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\n\n\n998\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\nNone\nNone\n\n\n999\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n\n\n1000 rows × 20 columns"
  },
  {
    "objectID": "posts/징검다리 문제.html#type-a",
    "href": "posts/징검다리 문제.html#type-a",
    "title": "징검다리 문제",
    "section": "",
    "text": "#타입A\nresult_list_b = []\nfor _ in range(1000): #다리 건너기 1000번 반복\n  a = Dari50()\n  b = Dari95()\n# 데이터 프레임 생성\n  for i in range(20):\n    if a.actions.count('die') &lt; 1:\n        a.play()\n  for i in range(20 - len(a.actions)):\n    if b.actions.count('die') &lt; 1:\n        b.play()\n  result_list_b.append(a.actions + b.actions)\n\nsum(pd.DataFrame(result_list_b).loc[:,19] == 'live') /len(pd.DataFrame(result_list_b).loc[:,19])\n\n0.384\n\n\n\npd.DataFrame(result_list_a)\n\n\n  \n    \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n0\nlive\nlive\ndie\ndie\ndie\ndie\nlive\nlive\ndie\ndie\nlive\nlive\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n1\nlive\ndie\ndie\nlive\nlive\ndie\nlive\nlive\nlive\nlive\ndie\ndie\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\n\n\n2\ndie\ndie\nlive\nlive\nlive\ndie\ndie\ndie\nlive\nlive\ndie\ndie\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\n\n\n3\ndie\ndie\nlive\ndie\ndie\ndie\nlive\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n4\ndie\nlive\ndie\ndie\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\ndie\nlive\nlive\ndie\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\nlive\nlive\nlive\ndie\nlive\ndie\ndie\nlive\ndie\nlive\nlive\ndie\ndie\nlive\nlive\ndie\nlive\ndie\nlive\nlive\n\n\n996\nlive\ndie\nlive\nlive\ndie\ndie\nlive\nlive\ndie\ndie\nlive\ndie\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\n\n\n997\ndie\nlive\ndie\nlive\ndie\nlive\nlive\ndie\nlive\ndie\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n998\nlive\nlive\nlive\ndie\ndie\ndie\ndie\nlive\ndie\ndie\nlive\ndie\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\n\n\n999\ndie\nlive\ndie\nlive\ndie\nlive\ndie\ndie\ndie\ndie\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n\n\n1000 rows × 20 columns"
  },
  {
    "objectID": "posts/징검다리 문제.html#type-b",
    "href": "posts/징검다리 문제.html#type-b",
    "title": "징검다리 문제",
    "section": "",
    "text": "#타입 B 완성 ~~\nresult_list_a = []\nfor _ in range(1000):\n  a = Dari50()\n  b = Dari95()\n\n  for i in range(20):\n    if a.actions.count('die') &lt; 8:\n        a.play()\n  for u in range(20 - len(a.actions)):\n    if b.actions.count('die') &lt; 1:\n        b.play()\n  result_list_a.append(a.actions + b.actions)\n\nsum(pd.DataFrame(result_list_a).loc[:,19] == 'live') /len(pd.DataFrame(result_list_a).loc[:,19])\n\n0.705\n\n\n\npd.DataFrame(result_list_b)\n\n\n  \n    \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n0\ndie\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n1\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n2\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n3\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n4\nlive\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n996\nlive\nlive\ndie\nlive\nlive\nlive\ndie\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n997\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\n\n\n998\nlive\nlive\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\ndie\nNone\nNone\nNone\n\n\n999\ndie\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\nlive\n\n\n\n\n1000 rows × 20 columns"
  },
  {
    "objectID": "posts/numpy_+_행렬.html",
    "href": "posts/numpy_+_행렬.html",
    "title": "numpy + 행렬",
    "section": "",
    "text": "import numpy as np"
  },
  {
    "objectID": "posts/numpy_+_행렬.html#행렬-만들기",
    "href": "posts/numpy_+_행렬.html#행렬-만들기",
    "title": "numpy + 행렬",
    "section": "1) 행렬 만들기",
    "text": "1) 행렬 만들기\n\n행렬 만들 때 기본적으로 np.array 를 사용 해서 만들고, 리스트 or 튜플 형태를 받아서 사용함.\n\n\n_list = [1,2,3]\nnp.array(_list)\n\narray([1, 2, 3])\n\n\n\n_list1 = [1,2,3]\n_list2 = [4,5,6]\nnp.array([_list1,_list2]) # 리스트를 따로 받을 때는 대괄호 한번씩 더해줘야함\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\n넘파이 행렬 함수 (1)\n\nreshape\n\n\na=np.array([11,22,33,44,55,66])\na.reshape(2,3)\n\narray([[11, 22, 33],\n       [44, 55, 66]])\n\n\n\narange\n\n\na = np.arange(5)\nb = np.arange(1,5)\na,b\n\n(array([0, 1, 2, 3, 4]), array([1, 2, 3, 4]))\n\n\n\nlinspace\n\n\nnp.linspace(0,1,12) #0부터1까지 12개로 나눠서 배열선언\n\narray([0.        , 0.09090909, 0.18181818, 0.27272727, 0.36363636,\n       0.45454545, 0.54545455, 0.63636364, 0.72727273, 0.81818182,\n       0.90909091, 1.        ])\n\n\n\n역행렬 + 전치행렬 + 행렬곱\n\n\nA=np.arange(4).reshape(2,2)\nA.T #T는 전치행렬을 구해줌\n\narray([[0, 1],\n       [2, 3]])\n\n\n\nA=np.arange(4).reshape(2,2)\nnp.linalg.inv(A) #np.linalg.inv는 역행렬을 구해줌\n\narray([[-1.5,  0.5],\n       [ 1. ,  0. ]])\n\n\n\nA=np.arange(4).reshape(2,2)\nnp.linalg.inv(A)\nA@np.linalg.inv(A) #@는 행렬곱을 구해줌\n\narray([[1., 0.],\n       [0., 1.]])\n\n\n\n\n넘파이 행렬함수 (2)\n\nzeros\n\n\nnp.zeros(3)\n\narray([0., 0., 0.])\n\n\n\nones\n\n\na = np.ones(3)\nb = np.ones((3,3))\na,b\n\n(array([1., 1., 1.]),\n array([[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]]))\n\n\n\neye\n\n\nnp.eye(3)\n\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\n\n\ndiag\n\n\nnp.diag([2,3,4,-2])\n\narray([[ 2,  0,  0,  0],\n       [ 0,  3,  0,  0],\n       [ 0,  0,  4,  0],\n       [ 0,  0,  0, -2]])"
  },
  {
    "objectID": "posts/numpy_+_행렬.html#행렬-인덱싱",
    "href": "posts/numpy_+_행렬.html#행렬-인덱싱",
    "title": "numpy + 행렬",
    "section": "행렬 인덱싱",
    "text": "행렬 인덱싱\n\nA = [[1,2,3,4],[-1,-2,-3,-4],[5,6,7,8],[-5,-6,-7,-8]]\nA2 = np.array(A)\nA2\n\narray([[ 1,  2,  3,  4],\n       [-1, -2, -3, -4],\n       [ 5,  6,  7,  8],\n       [-5, -6, -7, -8]])\n\n\n\nA2[[0,2],:] #1행,3행 추출\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\nA2[:,[0]]\n\narray([[ 1],\n       [-1],\n       [ 5],\n       [-5]])\n\n\n\nA2[:,0]\n\narray([ 1, -1,  5, -5])"
  },
  {
    "objectID": "posts/2wk_2.html",
    "href": "posts/2wk_2.html",
    "title": "2wk 적분 자세히",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\n16번(그래프의 교점)\n\nx = np.linspace(1,3,100)\nf = 3**(x-8)\ng = (1/27)**x\nplt.plot(x,f)\nplt.plot(x,g)\n\n\n\n\n\n\n\n\n\n\n11번(등차수열)\n\nn = np.linspace(1,15,15)\nd =4\nan = (n-7)*d\nnp.abs(an[5]),np.abs(an[7]),\n\n(4.0, 4.0, [60.0])\n\n\n\nnp.sum(an) #답 구하기!\n\n60.0\n\n\n#8번 삼차함수 간단한 적분 (y값 mean * 밑변) + np.random.rand\n\n#풀이 1\nf = lambda x: (3*x**4 -3*x)/(x-1)\nx = np.linspace(-2,2,1000)\nplt.plot(x,f(x),'--') #그래프 그리기\nnp.mean(f(x))*4 # 정답\n##############\n# 풀이 2 (rand)\n# x_rand = np.random.rand(1000000)*4 - 2  ## -2~2 까지 임의의수가 골고루 퍼져있음.\n# np.mean(f(x_rand)) *4\n# random.rand --&gt; 기본 0~1 / 범위만큼 곱하고 + 연산자로 범위 조절\n##############\n# 풀이3 (사다리꼴법 사용)\n# f = lambda x: (3*x**4 -3*x)/(x-1)\n# x = np.linspace(-2,2,10000)\n# delta = x[1] - x[0] #x의 단위 생성\n# f_arr = f(x) # y값들의 array생성\n# F_arr = np.cumsum(f_arr) * delta\n# F_arr[-1]\n# # x[np.argmin(F_arr)] ## 넓이가 0이 되는 x값\n\n16.053206593500782\n\n\n\n\n\n\n\n\n\n\n\n26번 입체도형(삼각함수) 적분\n\nx =np.linspace(3/4*np.pi,5/4*np.pi,1000)\nf = lambda x : np.sqrt((1-2*x)*np.cos(x))\nnp.mean(f(x)**2)*(2/4*np.pi) #y값에 정사각형이므로 제곱을 해줌\n\n7.469947367280549\n\n\n\n\n19번 삼각함수와 bool연산\n\nx = np.linspace(1,15,15)\nf = lambda x:np.sin(np.pi/4*x)\nsum(x[f(2+x)*f(2-x) &lt;1/4])\n# x[f(2+x)*f(2-x) &lt;1/4] ## 조건을 만족시키는 x값\n\n32.0\n\n\n\n\n12번 t값에 따른 (3차) 함수 넓이 변화 / 함수정의 사용(make_gfunction)\n\nx = np.linspace(0,10,1001)\nt = 3.2 # t=3.2로 임의로 정의\nf = lambda x : 1/9*x*(x-6)*(x-9)\n# g(x) 정의\ndef make_gfunction(t):\n  def g(x):\n    if x&lt;t:\n      return f(x)\n    else:\n      return -(x-t)+f(t)\n  return g\n#### t값에 따른 그래프 그리기\ng=make_gfunction(t)\nfx = list(map(f,x))\ngx = list(map(g,x))\nplt.plot(x,fx,label=\"f(x)\")\nplt.plot(x,gx,label=\"g(x)\")\n### g(x)와 x축 넓이 구하는 함수생성\ndef cal_area(t):\n  # t=3.2\n  g = make_gfunction(t)\n  fx = list(map(f,x))\n  gx = list(map(g,x))\n  Gx = np.cumsum(gx)*0.01\n  S = np.max(Gx)\n  return S\n\n\n\n\n\n\n\n\n\nt = np.linspace(0,6,101)[1:-1]\nSt = list(map(cal_area,t))\nnp.max(St)\n\n32.24994166666667\n\n\n\n\nrange 활용(with 등차수열)\n\nlist(range(10))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nlist(range(3,10,2))\n\n[3, 5, 7, 9]\n\n\n\nf = lambda x: x**2\nlist(map(f,[1,2,3,4]))\n\n[1, 4, 9, 16]\n\n\n\nnp.linspace(1,31,11) ## 1부터 31까지 3단위로 쪼개기\n# = np.array(range(1,31,3))\n# = np.arange(1,32,3)\n# = n = np.arange(1,12) / 3*n-2\n# = a = lambda n: 3*n-2 / a(1) ~ a(11)\n# = n = np.arange(1,12) / a= lambda n: 3*n-2 / a(n)\n# = n = np.arange(1,12) / a = lambda n: 3*n-2 / list(map(a,n))\n# = n = np.arange(32) / n[1::3]\n\narray([ 1.,  4.,  7., 10., 13., 16., 19., 22., 25., 28., 31.])\n\n\n\nlist 와 np.array의 관계(map)\n\nmap 함수는 list에 적용되지만 np.array(넘파이 어레이)에는 적용 되지않음.\n\n\n\n\n접선 리턴\n\ndef make_func(x0):\n    f = lambda x: x**2\n    def func(x):\n        h = 0.0001\n        a = (f(x0+h)-f(x0))/h\n        return a*(x-x0) + f(x0)\n    return func\n\n\nx = np.linspace(-5,5,101)\ntan_line = make_func(1.2)\nplt.plot(x,x**2,'--')\nplt.plot(x,tan_line(x),'--')"
  },
  {
    "objectID": "posts/클래스_Student_RPS_설계.html",
    "href": "posts/클래스_Student_RPS_설계.html",
    "title": "클래스_Student/RPS_설계",
    "section": "",
    "text": "from IPython.core.display import HTML\nimport numpy as np\nimport pandas as pd\n* 중요 *\n사실 파이썬의 list도 클래스 종류임\n리스트 입력 값은 __init__ 메소드의 입력값\na = '123'\nlist(a)\n\n['1', '2', '3']\na = list()\na.__init__('123')\na\n\n['1', '2', '3']\na = list()\na\na= np.arange(4).reshape(2,2)\na\n\narray([[0, 1],\n       [2, 3]])\na.__str__()\n\n'[[0 1]\\n [2 3]]'\na.__repr__()\n\n'array([[0, 1],\\n       [2, 3]])'\nprint(a.__str__())\n\n[[0 1]\n [2 3]]"
  },
  {
    "objectID": "posts/클래스_Student_RPS_설계.html#str__-과-__repr__의-차이",
    "href": "posts/클래스_Student_RPS_설계.html#str__-과-__repr__의-차이",
    "title": "클래스_Student/RPS_설계",
    "section": "__str__ 과 __repr__의 차이",
    "text": "__str__ 과 __repr__의 차이\nprint(ins) == print(ins.__str__)\n\na= np.arange(4).reshape(2,2)\n(print(a),print(a.__str__()))\n\n[[0 1]\n [2 3]]\n[[0 1]\n [2 3]]\n\n\n(None, None)\n\n\nins = print(ins.__repr__)\n\na= np.arange(4).reshape(2,2)\na,print(a.__repr__())\n\narray([[0, 1],\n       [2, 3]])\n\n\n(array([[0, 1],\n        [2, 3]]),\n None)"
  },
  {
    "objectID": "posts/클래스_Student_RPS_설계.html#wk-2-과제",
    "href": "posts/클래스_Student_RPS_설계.html#wk-2-과제",
    "title": "클래스_Student/RPS_설계",
    "section": "13wk-2 과제",
    "text": "13wk-2 과제\n1. Student 클래스 설계\n\nclass Student:\n  def __init__(self,name,age,semester):\n    self.name = name\n    self.age = age\n    self.semester = semester\n  def __str__(self):\n    print_str = '''이름: {}\\n나이: {}\\n학기: {}'''.format(self.name,self.age,self.semester)\n    return print_str\n\n\n# 사용 예시\nboram = Student(name='김보람', age=20, semester=1)\nprint(boram)\n\n이름: 김보람\n나이: 20\n학기: 1\n\n\n\n# 사용 예시\nPaul = Student(name='김 폴', age=22, semester=2)\nprint(Paul)\n\n이름: 김 폴\n나이: 22\n학기: 2\n\n\n2. RPS 클래스 설계 (1)\n\nclass RPS:\n  def __init__(self,candidate):\n    self.candidate = candidate\n    self.actions = []\n  def pick(self):\n    self.actions.append(np.random.choice(self.candidate))\n  def _repr_html_(self):\n    html_str = '''\n      낼 수 있는 패: {}&lt;br&gt;\n      기록: {}\n      '''\n    return html_str.format(self.candidate,self.actions)\n\n\na = RPS(['가위','바위','보'])\na.pick()\na\n\n\n      낼 수 있는 패: ['가위', '바위', '보']\n      기록: ['바위']\n      \n\n\n\na = RPS(['가위','바위','보'])\n\n\na.candidate, a.actions\n\n(['가위', '바위', '보'], [])\n\n\n\na\n\n\n      낼 수 있는 패: ['가위', '바위', '보']\n      기록: []\n      \n\n\n\nfor i in range(5):\n    a.pick()\n\n\n      낼 수 있는 패: ['가위', '바위', '보']\n      기록: ['바위', '보', '보', '가위', '가위', '바위', '보', '보', '바위', '보', '바위', '보', '바위', '바위', '바위', '가위']\n      \n\n\n3. RPS 설계 (2)\n\na = RPS(['가위','보'])\nb = RPS(['가위'])\nrslt = []\nfor i in range(100):\n  a.pick()\n  b.pick()\n  if a.actions[-1] =='가위' and b.actions[-1] =='가위':\n    rslt.append('-')\n  elif a.actions[-1] =='보' and b.actions[-1] =='가위':\n    rslt.append('b')\n  else:\n    rslt.append('a')\n\n\n{'a의승리':rslt.count('a'),'무승부':rslt.count('-'),'b의승리':rslt.count('b')}\n\n{'a의승리': 0, '무승부': 53, 'b의승리': 47}\n\n\n4.RPS설계 (3)\n\na = RPS(['가위','보'])\nb = RPS(['가위','바위'])\nrslt = []\nfor i in range(100):\n  a.pick()\n  b.pick()\n  if a.actions[-1] =='가위' and b.actions[-1] =='가위':\n    rslt.append('-')\n  elif a.actions[-1] =='보' and b.actions[-1] =='가위':\n    rslt.append('b')\n  elif a.actions[-1] =='가위' and b.actions[-1] =='바위':\n    rslt.append('b')\n  else:\n    rslt.append('a')\n\n\n{'a의승리':rslt.count('a'),'무승부':rslt.count('-'),'b의승리':rslt.count('b')}\n\n{'a의승리': 21, '무승부': 29, 'b의승리': 50}"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/클래스 공부 (2).html",
    "href": "posts/클래스 공부 (2).html",
    "title": "클래스 공부 (2)",
    "section": "",
    "text": "# import\nfrom IPython.core.display import HTML\n\n\n클래스공부 1단계: 메소드 (복습)\n\nclass JungKKuckMa:\n    def show(self):\n        _str = self.html_str.format(\n            ttl = self.title,\n            url = self.imgurl,\n            Q = self.ques,\n            A = self.ans,\n            hl = self.highlight\n        )\n        display(HTML(_str)) \n\n\npp2023 = JungKKuckMa()\n\n\nclass JungKKuckMa:\n    def __init__(self):\n        self.title = '버거킹 신메뉴 등장'\n        self.imgurl = 'https://image-cdn.hypb.st/https%3A%2F%2Fkr.hypebeast.com%2Ffiles%2F2023%2F10%2Fhamburgerking-2023.jpg?cbr=1&q=90'\n        self.ques = \"Q: 햄버거 남겨도 괜찮을까??\"\n        self.ans = \"A: 너는 다 먹을수 있어\"\n        self.highlight = '마음'\n        self.html_str =\\\n        '''\n        &lt;style&gt;\n            .title {{\n                font-family: \"Times New Roman\", serif;\n                font-size: 30px;\n                font-weight: 900;\n            }}\n            .text {{\n                font-family: \"Arial\", sans-serif;\n                font-size: 20px;\n                font-style: italic;\n            }}\n            .highlight {{\n                font-family: \"Montserrat\", monospace;\n                font-size: 35px;\n                font-weight: 900;\n                text-decoration: underline;\n                font-style: normal;\n                color: darkblue;\n                background-color: #FFFF00;\n            }}\n        &lt;/style&gt;\n        &lt;p class=\"title\"&gt;{ttl}&lt;/p&gt;\n        &lt;img src={url} width=\"600\"&gt;\n        &lt;p&gt; \\n &lt;/p&gt;\n        &lt;p class=\"text\"&gt;{Q}&lt;/p&gt;\n        &lt;p class=\"text\"&gt;{A}&lt;/p&gt;\n        &lt;p class=\"title\"&gt;중요한 것은 꺾이지 않는 &lt;span class=\"highlight\"&gt;{hl}&lt;/span&gt;&lt;/p&gt;\n        '''\n    def show(self):\n        _str = self.html_str.format(\n            ttl = self.title,\n            url = self.imgurl,\n            Q = self.ques,\n            A = self.ans,\n            hl = self.highlight\n        )\n        display(HTML(_str))\n\n\npp2023 = JungKKuckMa()\n\n\npp2023.show()\n\n\n        \n        버거킹 신메뉴 등장\n        \n         \n \n        Q: 햄버거 남겨도 괜찮을까??\n        A: 너는 다 먹을수 있어\n        중요한 것은 꺾이지 않는 마음"
  },
  {
    "objectID": "posts/2023_12wk_2_클래스.html",
    "href": "posts/2023_12wk_2_클래스.html",
    "title": "클래스 공부 (4) / 메소드 init",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nfrom IPython.core.display import HTML"
  },
  {
    "objectID": "posts/2023_12wk_2_클래스.html#self는-항상-써야함",
    "href": "posts/2023_12wk_2_클래스.html#self는-항상-써야함",
    "title": "클래스 공부 (4) / 메소드 init",
    "section": "self는 항상 써야함",
    "text": "self는 항상 써야함\n\nclass Klass:\n  def hello(self): # hello 메소드 안에 self를 꼭 입력\n    print(\"hello\")\n\n\nins = Klass()\n\n\nins.hello()\n\nhello"
  },
  {
    "objectID": "posts/2023_12wk_2_클래스.html#init-사용",
    "href": "posts/2023_12wk_2_클래스.html#init-사용",
    "title": "클래스 공부 (4) / 메소드 init",
    "section": "init 사용",
    "text": "init 사용\n\n# class 예제 1\n\n\nclass Klass():\n  def __init__(self):\n    self.a = True\n  def show(self):\n    print(self.a)\n\n\nins = Klass()\n\n\nins.show()\n\nTrue\n\n\n\n# class 예제 2-1\n\n\nclass Klass():\n  def __init__(self):\n    self.a = True\n  def toggle(self):\n    if self.a == True:\n      self.a = False\n    elif self.a == False:\n      self.a = True\n  def show(self):\n    print(self.a)\n\n\nins = Klass()\n\n\nins.toggle()\nins.show()\n\nFalse\n\n\n\n# class 예제 2-2\n\n\nclass Klass():\n  def __init__(self):\n    self.a = True\n  def toggle(self):\n    self.a = not self.a\n  def show(self):\n    print(self.a)\n\n\nins = Klass()\n\n\nins.toggle()\nins.show()\n\nTrue\n\n\n\n# class 예제 3\n\n\nclass Klass():\n  def __init__(self):\n    self.a = 0\n  def up(self):\n    self.a = self.a +1\n  def show(self):\n    print(self.a)\n\n\nins = Klass()\n\n\nins.a\n\n0\n\n\n\nins.up()\n\n\nins.a\n\n1\n\n\n\n## 예제4\n\n\nclass Klass:\n  def __init__(self,value):\n    self.a = value\n  def show(self):\n    print(self.a)\n\n\nins = Klass(24)\n\n\nins.show()\n\n24\n\n\n\n#예제5\n\n\nclass Klass:\n  def __init__(self):\n    self.a = 0\n  def up(self):\n    self.a = self.a +1\n  def jump(self,jump_size):\n    self.a = self.a + jump_size\n  def show(self):\n    print('a의 값은 {}입니다.'.format(self.a))\n\n\nins = Klass()\n\n\nins.a\n\n0\n\n\n\nins.jump(234)\nins.show()\n\na의 값은 234입니다.\n\n\n\n# 예제6\n\n\nclass Klass:\n  def __init__(self):\n    self.a = 0\n  def up(self):\n    self.a = self.a +1\n  def jump(self,jump_size):\n    self.a = self.a + jump_size\n  def reset(self):\n    self.a = 0 ### self.__init__() 코드와 동일\n  def show(self):\n    print('a의 값은 {}입니다.'.format(self.a))\n\n\nins = Klass()\n\n\nins.jump(234)\nins.show()\n\na의 값은 234입니다.\n\n\n\nins.reset()\nins.show()\n\na의 값은 0입니다.\n\n\n\n# 예제7 / 이미지 삽입\n\n\nclass Klass:\n  def __init__(self):\n    self.url = 'https://talkimg.imbc.com/TVianUpload/tvian/TViews/image/2023/07/21/4a6e5d86-eafd-4c4c-a252-faf00c45cfcc.jpg'\n  def show(self):\n    html_str = '&lt;img src={url} width=250&gt;'.format(url=self.url)\n    display(HTML(html_str))\n\n\nins = Klass()\n\n\nins.show()\n\n\n\n\n\n# 예제8\n\n\nclass Klass:\n  def __init__(self):\n    self.n = 0\n    self.url = 'https://talkimg.imbc.com/TVianUpload/tvian/TViews/image/2023/07/21/4a6e5d86-eafd-4c4c-a252-faf00c45cfcc.jpg'\n  def show(self):\n    self.n = self.n + 1\n    html_str = '&lt;img src={url} width=250&gt;'.format(url=self.url)\n    print('당신은 뉴진스를 {}번 봤습니다.'.format(self.n))\n    display(HTML(html_str))\n\n\nins = Klass()\n\n\nins.show()\n\n당신은 뉴진스를 2번 봤습니다."
  },
  {
    "objectID": "posts/2023_12wk_2_클래스.html#wk-2-과제",
    "href": "posts/2023_12wk_2_클래스.html#wk-2-과제",
    "title": "클래스 공부 (4) / 메소드 init",
    "section": "12wk-2 과제",
    "text": "12wk-2 과제\n\nimport\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport yfinance as yf\n\n/usr/local/lib/python3.10/dist-packages/yfinance/base.py:48: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n  _empty_series = pd.Series()\n\n\n\n과제1\n\n\nclass Stock:\n  def __init__(self):\n    self.y = None\n    self.sy = None\n  def crawling(self,start_date,end_date,code):\n    self.y = yf.download(code, start=start_date, end=end_date)['Adj Close'].to_numpy()\n  def smoothing(self,n):\n    T = len(self.y)\n    self.n = n\n    M = (np.eye(T) + np.array([abs(i-j)&lt;2 for i in range(T) for j in range(T)]).reshape(T,T))/4\n    M[0,0] = 3/4\n    M[-1,-1] = 3/4\n    self.sy = np.linalg.matrix_power(M,self.n)@self.y\n  def plot(self):\n    plt.plot(y,label='y')\n    plt.plot(self.sy,label='y_hat')\n    plt.legend()\n\n\nins = Stock()\n\n\n# kakao 인스턴스\ncode = '035720.KS'\nstart_date = '2023-01-01'\nend_date = '2023-05-26'\n\n\nins.crawling(start_date,end_date,code)\n\n[*********************100%%**********************]  1 of 1 completed\n\n\n\nins.smoothing(100)\n\n\nins.plot()\n\n\n\n\n\n\n\n\n\n과제2\n\n\nclass LinearRegression:\n  def __init__(self,x,y):\n    self.x = x\n    self.y = y\n  def fit(self):\n    self.X = np.stack([np.ones(len(self.x)),x],axis=1)\n    self.y_hat = self.X@(np.linalg.inv((self.X).T@self.X))@((self.X).T@self.y)\n  def plot(self):\n    plt.plot(self.x,self.y,'o',label='(x,y)')\n    plt.plot(self.x,self.y_hat,'--r',label='(x,y_hat)')\n    plt.legend()\n\n\nx = np.array(\n    [0.007, 0.008, 0.008, 0.011, 0.037, 0.047, 0.059, 0.07 , 0.072,\n     0.075, 0.078, 0.08 , 0.082, 0.11 , 0.114, 0.117, 0.133, 0.15 ,\n     0.161, 0.163, 0.172, 0.208, 0.209, 0.221, 0.229, 0.231, 0.234,\n     0.235, 0.249, 0.251, 0.256, 0.269, 0.269, 0.273, 0.275, 0.298,\n     0.305, 0.309, 0.34 , 0.362, 0.371, 0.374, 0.382, 0.387, 0.388,\n     0.394, 0.395, 0.397, 0.401, 0.404, 0.419, 0.433, 0.436, 0.466,\n     0.481, 0.492, 0.495, 0.508, 0.511, 0.512, 0.554, 0.57 , 0.574,\n     0.575, 0.584, 0.6  , 0.601, 0.615, 0.618, 0.623, 0.629, 0.633,\n     0.646, 0.65 , 0.654, 0.662, 0.673, 0.686, 0.702, 0.744, 0.754,\n     0.766, 0.772, 0.781, 0.798, 0.8  , 0.807, 0.836, 0.837, 0.871,\n     0.873, 0.877, 0.879, 0.889, 0.891, 0.902, 0.904, 0.923, 0.952,\n     0.981]\n)\ny = np.array(\n    [4.004, 4.189, 5.483, 4.902, 5.174, 4.468, 4.95 , 4.463, 5.476,\n     4.446, 4.764, 5.244, 4.357, 4.796, 5.464, 4.196, 5.244, 4.868,\n     5.358, 4.493, 4.831, 4.716, 4.929, 4.588, 4.718, 4.389, 4.985,\n     4.266, 4.291, 3.697, 4.248, 4.88 , 5.126, 4.563, 4.131, 4.728,\n     4.168, 4.584, 3.953, 4.747, 3.592, 5.023, 4.601, 3.904, 4.092,\n     4.37 , 3.922, 4.145, 4.576, 4.25 , 4.051, 3.616, 4.634, 3.496,\n     4.631, 4.025, 4.197, 4.226, 4.808, 3.676, 3.834, 3.197, 4.36 ,\n     3.547, 3.956, 3.522, 4.26 , 3.443, 3.97 , 4.068, 4.186, 3.262,\n     3.452, 3.946, 3.875, 3.444, 3.501, 3.959, 3.843, 2.679, 3.266,\n     3.506, 2.916, 3.714, 4.007, 2.795, 3.329, 2.756, 3.72 , 2.381,\n     2.798, 3.035, 3.492, 3.22 , 3.073, 3.85 , 3.233, 3.396, 3.264,\n     2.986]\n)\n\n\nLR = LinearRegression(x,y)\n\n\nLR.fit()\n\n\nLR.plot()"
  },
  {
    "objectID": "posts/matplotlib 공부(1).html",
    "href": "posts/matplotlib 공부(1).html",
    "title": "matplotlib 공부 (1)",
    "section": "",
    "text": "import matplotlib.pyplot as plt\n\n\ny1= [1.0, 2.0, 3.0, 4.0]\ny2= [1.1, 2.2, 2.8, 0.0]\nplt.plot(y1,'--o',label='y1')\nplt.plot(y2,'--o',label='y2')\nplt.legend()"
  },
  {
    "objectID": "posts/1주차~2주차.html",
    "href": "posts/1주차~2주차.html",
    "title": "1주차~2주차",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/1주차~2주차.html#그래프와-접선-반환-함수",
    "href": "posts/1주차~2주차.html#그래프와-접선-반환-함수",
    "title": "1주차~2주차",
    "section": "그래프와 접선 반환 함수",
    "text": "그래프와 접선 반환 함수\n\n# x0의 좌표를 넣으면 접선의 점들을 반환\ndef make_func(x0): # x0좌표넣기\n    f = lambda x: x**3 # 함수 정의\n    def func(x):\n        h = 0.0001\n        a = (f(x0+h)-f(x0))/h\n        return a*(x-x0) + f(x0)\n    return func\nx = np.linspace(-5,5,101) #x범위 선\ntan_line = make_func(3)\nplt.plot(x,x**3,'--')\nplt.plot(x,tan_line(x),'--')"
  },
  {
    "objectID": "posts/1주차~2주차.html#미분함수-값-구하기",
    "href": "posts/1주차~2주차.html#미분함수-값-구하기",
    "title": "1주차~2주차",
    "section": "미분함수 값 구하기",
    "text": "미분함수 값 구하기\n\nf = lambda x: (x+1)*(x**2+3)\nh = 0.000001\n(f(1+h)-f(1))/h\n\n8.000004001473826"
  },
  {
    "objectID": "posts/1주차~2주차.html#범위에-따른-그래프-그리기",
    "href": "posts/1주차~2주차.html#범위에-따른-그래프-그리기",
    "title": "1주차~2주차",
    "section": "범위에 따른 그래프 그리기",
    "text": "범위에 따른 그래프 그리기\n\nf = lambda x: 3*x-1 if x&lt;2 else x**2+1\nx = np.linspace(0,4,101)\nplt.plot(x,list(map(f,x)))"
  },
  {
    "objectID": "posts/1주차~2주차.html#삼각함수-theta-값-변환",
    "href": "posts/1주차~2주차.html#삼각함수-theta-값-변환",
    "title": "1주차~2주차",
    "section": "삼각함수 theta 값 변환",
    "text": "삼각함수 theta 값 변환\n\ntheta = np.linspace(3/2*np.pi,2*np.pi,100) #theta선언\nnp.argmin(np.abs(np.cos(theta) - np.sqrt(6)/3))\n\n60\n\n\n\nnp.tan(theta[60])\n\n-0.7120967763793676\n\n\n##적분\n\nf = lambda x: x+np.log(x)\nx = np.linspace(1,np.exp(1),100)\nnp.mean((1+1/x)*f(x)) * (np.exp(1)-1)\n\n6.409521328970472"
  },
  {
    "objectID": "posts/1주차~2주차.html#절댓값함수-구현",
    "href": "posts/1주차~2주차.html#절댓값함수-구현",
    "title": "1주차~2주차",
    "section": "절댓값함수 구현",
    "text": "절댓값함수 구현\n\nx = np.linspace(-3,3,101)\nff = np.abs(np.sin(x))*np.cos(x)\nf = np.cumsum(ff) * 0.06\n\n\nplt.plot(x,ff)\nplt.plot(x,f)"
  },
  {
    "objectID": "posts/1주차~2주차.html#등차수열-구현",
    "href": "posts/1주차~2주차.html#등차수열-구현",
    "title": "1주차~2주차",
    "section": "등차수열 구현",
    "text": "등차수열 구현\n\ndef func(d):\n  n = np.arange(1,76)\n  an = 1+(n-1)*d\n  return np.abs(sum(an)-1046.25)\n\n\nd = np.linspace(0,1,101)[1:-1]\nd[np.argmin(list(map(func,d)))]\n\n0.35000000000000003\n\n\n\nnp.linspace(1,15,15)\n\narray([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13.,\n       14., 15.])"
  },
  {
    "objectID": "posts/1주차~2주차.html#lp-구현",
    "href": "posts/1주차~2주차.html#lp-구현",
    "title": "1주차~2주차",
    "section": "l(p) 구현",
    "text": "l(p) 구현\n\nx = np.array([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n              0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n              0, 0, 0, 0, 1, 0])\nx\n\narray([0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n       0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n       0, 0, 0, 0, 1, 0])\n\n\n\nl = lambda p: 16*np.log(p) + (50-16)*np.log(1-p)\nh =0.000000001\n(l(0.32+h)-l(0.32))/h\n\n3.5527136788005005e-06\n\n\n\np = np.linspace(1/100,1,100)[:-1]\np\n\narray([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 , 0.11,\n       0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2 , 0.21, 0.22,\n       0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3 , 0.31, 0.32, 0.33,\n       0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4 , 0.41, 0.42, 0.43, 0.44,\n       0.45, 0.46, 0.47, 0.48, 0.49, 0.5 , 0.51, 0.52, 0.53, 0.54, 0.55,\n       0.56, 0.57, 0.58, 0.59, 0.6 , 0.61, 0.62, 0.63, 0.64, 0.65, 0.66,\n       0.67, 0.68, 0.69, 0.7 , 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77,\n       0.78, 0.79, 0.8 , 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88,\n       0.89, 0.9 , 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99])\n\n\n\np[np.argmax(l(p))]\n\n0.32"
  },
  {
    "objectID": "posts/1주차~2주차.html#수렴발산-판단",
    "href": "posts/1주차~2주차.html#수렴발산-판단",
    "title": "1주차~2주차",
    "section": "수렴발산 판단",
    "text": "수렴발산 판단\n\nsum([1/2**n for n in range(1,100)])\n\n1.0\n\n\n\nn = np.linspace(1,10000,10000)\nan = 1/n\nsn = np.cumsum(an)\nsn\n\narray([1.        , 1.5       , 1.83333333, ..., 9.78740603, 9.78750604,\n       9.78760604])"
  },
  {
    "objectID": "posts/1주차~2주차.html#랜덤난수-생성",
    "href": "posts/1주차~2주차.html#랜덤난수-생성",
    "title": "1주차~2주차",
    "section": "랜덤난수 생성",
    "text": "랜덤난수 생성\n- 0~1 사이에서 10개의 난수생성\n\nnp.random.rand(10)\n\narray([0.84323613, 0.02527665, 0.92869932, 0.14644205, 0.77705808,\n       0.85766583, 0.76895973, 0.79501297, 0.91382899, 0.47971707])\n\n\n- 0~2 사이에서 10개의 난수생성\n\nnp.random.rand(10)*2\n\narray([0.16174621, 1.12062743, 0.55825861, 1.57625627, 1.93815334,\n       1.8475947 , 0.97690983, 1.47023178, 0.27858998, 0.46153886])\n\n\n- 1~3 사이에서 10개의 난수생성\n\nnp.random.rand(10)*2 + 1\n\narray([1.61237633, 2.55299095, 1.84190731, 2.14810723, 1.09863028,\n       1.3259276 , 1.50301586, 1.40471319, 1.9368154 , 1.03094992])\n\n\n- [0,7) 에서 10개의 정수생성\n\nnp.random.randint(0,7,size=10)\n\n- [11,22,33] 에서 중복허용하여 20개 추출\n\nnp.random.choice([11,22,33],20)"
  },
  {
    "objectID": "posts/1주차~2주차.html#그래프-교점-좌표1",
    "href": "posts/1주차~2주차.html#그래프-교점-좌표1",
    "title": "1주차~2주차",
    "section": "그래프 교점 좌표(1)",
    "text": "그래프 교점 좌표(1)\n\nx = np.linspace(np.pi/2, np.pi,1000000)\nf = lambda x: np.sin(3/2*x)\ng = lambda x: np.cos(2*x)*np.sin(5*x)\n\n\nx[np.argmin(np.abs(f(x)-g(x)))]\n\n1.9462123119258816"
  },
  {
    "objectID": "posts/1주차~2주차.html#그래프-교점-좌표2",
    "href": "posts/1주차~2주차.html#그래프-교점-좌표2",
    "title": "1주차~2주차",
    "section": "그래프 교점 좌표(2)",
    "text": "그래프 교점 좌표(2)\n\ntheta = np.linspace(3/2*np.pi,2*np.pi,500)[1:-1]\nf = lambda x: np.sin(x)\ntheta[np.argmin(np.abs(np.array(list(map(f,-theta)))-1/3))]\n\n5.9432133566909116\n\n\n\nnp.tan(5.9432133566909116)\n\n-0.35370531901177255"
  },
  {
    "objectID": "posts/클래스 공부 (1).html",
    "href": "posts/클래스 공부 (1).html",
    "title": "클래스 공부 (1)",
    "section": "",
    "text": "#1 클래스 선언\n\n클래스의 이름은 대문자로 설정\n\n\n# 예시\nclass Klass:\n    pass"
  },
  {
    "objectID": "posts/클래스 공부 (1).html#클래스-공부-1",
    "href": "posts/클래스 공부 (1).html#클래스-공부-1",
    "title": "클래스 공부 (1)",
    "section": "",
    "text": "#1 클래스 선언\n\n클래스의 이름은 대문자로 설정\n\n\n# 예시\nclass Klass:\n    pass"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PP2024",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n \n\n\nImport\n\n\n \n\n\n\n\nFeb 3, 2026\n\n\n리스트와 반복문\n\n\n이정민 \n\n\n\n\nJan 2, 2026\n\n\n클래스_Student/RPS_설계\n\n\n이정민 \n\n\n\n\nDec 2, 2025\n\n\n클래스 공부 (4) / 메소드 init\n\n\n이정민 \n\n\n\n\nSep 2, 2025\n\n\n클래스 공부 (2)\n\n\n이정민 \n\n\n\n\nSep 2, 2025\n\n\nnumpy + 행렬\n\n\n이정민 \n\n\n\n\nSep 2, 2025\n\n\nmatplotlib 공부 (1)\n\n\n이정민 \n\n\n\n\nSep 2, 2025\n\n\n클래스 공부 (1)\n\n\n이정민 \n\n\n\n\nSep 2, 2025\n\n\n클래스 공부 (3)\n\n\n이정민 \n\n\n\n\nMar 27, 2024\n\n\n2wk 적분 자세히\n\n\n이정민 \n\n\n\n\nMar 27, 2024\n\n\n1주차~2주차\n\n\n이정민 \n\n\n\n\nFeb 21, 2024\n\n\nPost With Code\n\n\nHarlow Malloc\n\n\n\n\nFeb 18, 2024\n\n\nWelcome To My Blog\n\n\nTristan O’Malley\n\n\n\n\n\nNo matching items"
  }
]